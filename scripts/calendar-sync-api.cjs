#!/usr/bin/env node

/**
 * Google Calendar Sync for Daily Planning (API Version)
 * Purpose: Convert daily time blocks into Google Calendar events using direct API
 * Usage: node scripts/calendar-sync-api.cjs [date] [--auto]
 * Dependencies: planning system data, Google Calendar API key
 */

const fs = require('fs');
const path = require('path');
const GoogleCalendarAPI = require('./google-calendar-api.cjs');

// Configuration
const PLANNING_DIR = path.join(__dirname, '..', 'planning');
const DATA_DIR = path.join(PLANNING_DIR, 'data');

function getSydneyDate(date = new Date()) {
    return new Date(date.toLocaleString('en-US', { timeZone: 'Australia/Sydney' }));
}

function formatSydneyDateString(date = new Date()) {
    const sydneyDate = new Date(date.toLocaleString('en-US', { timeZone: 'Australia/Sydney' }));
    return sydneyDate.toISOString().split('T')[0];
}

function getBlockTypeColor(type) {
    const colors = {
        'deep-work': '1',     // Blue
        'learning': '2',      // Green
        'admin': '6',        // Orange
        'review': '3'        // Purple
    };
    return colors[type] || '7';  // Default grey
}

function formatTimeForCalendar(date, timeStr) {
    // Create proper ISO datetime string with Sydney timezone
    const [hours, mins] = timeStr.split(':').map(Number);
    const dateObj = new Date(`${date}T${timeStr}:00`);
    
    // Format for Google Calendar API (ISO 8601)
    return `${date}T${timeStr}:00+11:00`;  // Sydney timezone offset (adjust for DST if needed)
}

function addMinutes(timeStr, minutes) {
    const [hours, mins] = timeStr.split(':').map(Number);
    const totalMins = hours * 60 + mins + minutes;
    const newHours = Math.floor(totalMins / 60);
    const newMins = totalMins % 60;
    return `${newHours.toString().padStart(2, '0')}:${newMins.toString().padStart(2, '0')}`;
}

async function syncCalendarEvents(date, autoMode = false) {
    const planFile = path.join(DATA_DIR, `day-${date}.json`);
    
    if (!fs.existsSync(planFile)) {
        console.log(`❌ No daily plan found for ${date}`);
        console.log(`   Create plan first with: node scripts/fractal-planner.cjs plan-day ${date}`);
        return;
    }

    const plan = JSON.parse(fs.readFileSync(planFile, 'utf8'));
    const timeBlocks = plan.timeBlocks || [];
    
    if (timeBlocks.length === 0) {
        console.log(`❌ No time blocks found in plan for ${date}`);
        return;
    }

    console.log(`📅 Calendar Sync for ${date}`);
    console.log(`🕐 Timezone: Australia/Sydney`);
    console.log(`📋 Time Blocks: ${timeBlocks.length}`);
    console.log(`🔑 Using: ${autoMode ? 'API Direct Mode' : 'Interactive Mode'}\n`);

    // Remove duplicates based on start time and activity
    const uniqueBlocks = timeBlocks.reduce((acc, block) => {
        const key = `${block.start}-${block.activity}`;
        if (!acc.some(b => `${b.start}-${b.activity}` === key)) {
            acc.push(block);
        }
        return acc;
    }, []);

    const api = new GoogleCalendarAPI();
    
    // Check if we can use the API
    if (!api.apiKey && !api.accessToken) {
        console.log('❌ No API credentials found!');
        console.log('   Please ensure GOOGLE_API_KEY is set in .env file');
        console.log('   Or run OAuth setup for full access');
        return;
    }

    if (autoMode) {
        console.log('🚀 Creating calendar events automatically...\n');
        
        const createdEvents = [];
        for (const block of uniqueBlocks) {
            try {
                const startTime = formatTimeForCalendar(date, block.start);
                const endTime = formatTimeForCalendar(date, addMinutes(block.start, block.duration));
                
                const eventData = {
                    summary: `${block.activity} - Fractal Plan`,
                    description: `${block.activity}\n\n🎯 Alignment: ${block.alignment}\n📋 Type: ${block.type}\n⏱️ Duration: ${block.duration} minutes\n\n🚀 Generated by Fractal Planning System`,
                    start: startTime,
                    end: endTime,
                    timeZone: 'Australia/Sydney',
                    colorId: getBlockTypeColor(block.type),
                    reminders: {
                        useDefault: false,
                        overrides: [
                            { method: 'popup', minutes: 10 },
                            { method: 'popup', minutes: 2 }
                        ]
                    }
                };
                
                console.log(`📝 Creating: ${block.activity} (${block.start} - ${addMinutes(block.start, block.duration)})`);
                const result = await api.createEvent('primary', eventData);
                
                if (result && result.id) {
                    console.log(`   ✅ Created successfully! Event ID: ${result.id}`);
                    createdEvents.push({
                        ...block,
                        eventId: result.id,
                        htmlLink: result.htmlLink
                    });
                } else {
                    console.log(`   ⚠️ Event created but no ID returned`);
                }
                
            } catch (error) {
                console.log(`   ❌ Failed: ${error.message}`);
            }
        }
        
        // Save sync results
        const syncData = {
            date,
            synced: new Date().toISOString(),
            mode: 'api-auto',
            eventsCreated: createdEvents.length,
            totalBlocks: uniqueBlocks.length,
            events: createdEvents
        };
        
        const syncFile = path.join(PLANNING_DIR, 'analytics', `calendar-sync-${date}.json`);
        fs.mkdirSync(path.dirname(syncFile), { recursive: true });
        fs.writeFileSync(syncFile, JSON.stringify(syncData, null, 2));
        
        console.log(`\n✨ Summary:`);
        console.log(`   Created ${createdEvents.length} of ${uniqueBlocks.length} events`);
        console.log(`   💾 Sync data saved to: analytics/calendar-sync-${date}.json`);
        
        if (createdEvents.length > 0 && createdEvents[0].htmlLink) {
            console.log(`   🔗 View in Calendar: ${createdEvents[0].htmlLink.split('/event')[0]}`);
        }
        
    } else {
        // Interactive mode - show commands for manual execution
        console.log('📋 Event Details for Manual Creation:\n');
        
        uniqueBlocks.forEach((block, index) => {
            const startTime = formatTimeForCalendar(date, block.start);
            const endTime = formatTimeForCalendar(date, addMinutes(block.start, block.duration));
            
            console.log(`${index + 1}. ${block.activity}`);
            console.log(`   📅 Date: ${date}`);
            console.log(`   ⏰ Time: ${block.start} - ${addMinutes(block.start, block.duration)} (Sydney)`);
            console.log(`   🎯 Purpose: ${block.alignment}`);
            console.log(`   📋 Type: ${block.type}`);
            console.log(`   🎨 Color: ${getBlockTypeColor(block.type)}`);
            console.log(`   🔔 Reminders: 10min & 2min before`);
            console.log('');
        });
        
        console.log('💡 To create events automatically, run:');
        console.log(`   node scripts/calendar-sync-api.cjs ${date} --auto\n`);
        
        // Save sync preparation data
        const syncData = {
            date,
            prepared: new Date().toISOString(),
            mode: 'manual',
            blocks: uniqueBlocks.map(b => ({
                start: b.start,
                duration: b.duration,
                activity: b.activity,
                type: b.type,
                alignment: b.alignment,
                calendarStart: formatTimeForCalendar(date, b.start),
                calendarEnd: formatTimeForCalendar(date, addMinutes(b.start, b.duration))
            }))
        };
        
        const syncFile = path.join(PLANNING_DIR, 'analytics', `calendar-prep-${date}.json`);
        fs.mkdirSync(path.dirname(syncFile), { recursive: true });
        fs.writeFileSync(syncFile, JSON.stringify(syncData, null, 2));
        
        console.log(`💾 Preparation data saved to: analytics/calendar-prep-${date}.json`);
    }
    
    console.log(`\n🎯 Next Steps:`);
    console.log(`   1. Check your Google Calendar for the events`);
    console.log(`   2. Run '/taskmaster-start' to begin daily execution`);
    console.log(`   3. Use '/taskmaster-block' to track time blocks`);
}

// Main execution
async function main() {
    const args = process.argv.slice(2);
    const date = args[0] && !args[0].startsWith('--') ? args[0] : formatSydneyDateString(getSydneyDate());
    const autoMode = args.includes('--auto');
    
    console.log(`🗓️  Calendar Sync API - ${date}`);
    console.log(`🌏 Timezone: Australia/Sydney`);
    console.log(`🔧 Mode: ${autoMode ? 'Automatic' : 'Interactive'}\n`);
    
    try {
        await syncCalendarEvents(date, autoMode);
    } catch (error) {
        console.error('❌ Error during sync:', error.message);
        process.exit(1);
    }
}

main();